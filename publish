#!/bin/bash
#
# A simple publishing tool for these utilities.
#
# A router and webserver and associated locations are defined at top.
# My configs in place at present.
#
# Most I store in /root/bin on my OpenWRT router and ensure that's in 
# root's path on the router so I can ssh to it and have access to these
# little utilities easily.
#
# This keeps them nice and separate from the core of OpenWRT.
#
# I have bash and python scripts with extensions to identify them, 
# but strip those extensions when copying to the router to provide 
# convenient commands.
#
# For the DDNS diagnostic tools there are some special locations:
#
# A place to copy our web page on a webserver that has a fixed IP so it can be 
# consulted when DDNS updates go awry and so that it sIP can be whitelisted for the
# NameCheap API which I use to check the DDNS configuration.
 
# To mount the router and webserver we need to have SSH access and SSh keys installed 
# as we'll use sshfs to mount them if needed) 
rsa_file=/home/bernd/.ssh/id_rsa

# A timestamp file to save copying files to webserver unnecessarily
tsFile="publish.time"

# Router configs
router=Cerberus
router_mount_dir=~/Mounts/$router
router_account=root@cerberus.lan

router_dir=/															# Root dir on the router
router_root_bin=$router_mount_dir/root/bin								# Router root users bin directory
router_usr_bin=$router_mount_dir/usr/bin								# Routers system /usr/bin directory
router_hotplug_file=$router_mount_dir/etc/hotplug.d/iface/96-ddns-log	# A hotplug filename that will execute when the router brings the WAN interface up

# Webserver configs
webserver=AlwaysData
webserver_mount_dir=~/Mounts/$webserver
webserver_account=thumbs-place@ssh-thumbs-place.alwaysdata.net

webserver_dir=/home/thumbs-place               # Home directory on the web server
webserver_html=$webserver_mount_dir/www/ddns   # The directory for the DDNS diagnostics web page
webserver_cgi=$webserver_mount_dir/www/cgi-bin # The ncdip utility is executed by the web page and needs to be in a CGI enabled direrctory on the server 
webserver_auth=$webserver_mount_dir/.auth	   # ncdip utility expects a ~/.auth/namecheap.auth file to log into the API

# Ensure the router is properly mounted (or we can't publish to them)
if [ ! -d $router_mount_dir ]; then
	echo Creating $router_mount_dir ... 
    mkdir -p $router_mount_dir
fi

mountpoint -q $router_mount_dir
if [ $? != 0 ];then
	echo Mounting $router_mount_dir ... 
	sshfs -o IdentityFile=$rsa_file $router_account:$router_dir $router_mount_dir
fi

# Most utilities in roots personal bin directory
utils=(	clear_notifications.sh
		ddns_domains.sh 
		ddnsip.py 
		dns.py 
		IPnames.py 
		IPowner.sh 
		knot.sh 
		lanstat.py
		list_notifications.sh 
		MACnames.py 
		ncdip.py 
		nodename.py 
		routes.py 
		search.sh
		textfile.sh 
		wanip.sh 
		wanstat.py 
		wantimes.py 
		whois.sh) 

echo Copying utilities to $router root bin...
for filename in ${utils[@]}; do
	cp $filename $router_root_bin/${filename%.*}	
done

# Some in /usr/bin as they need to be in the path of the hotplug daemon or cron
echo Copying binaries to $router usr bin...
cp log_wanip.sh $router_usr_bin/log_wanip

# Special hotplug configuration for wanip logging 
echo Copying hotplug configuration to $router...
cp hotplug_ddns_log.sh $router_hotplug_file

# Check if we need to publish to webserver
files=(default.css index.php ncdip.py)
newest=$(stat -c %Y $tsFile)
newestFile=$tsFile
for file in ${files[@]}; do
	filetime=$(stat -c %Y $file)
	[[ $filetime -gt $newest ]] && newest=$filetime && newestFile="$file"
done

if [[ "$newestFile" != "$tsFile" ]]; then
	# Ensure the webserver is properly mounted (or we can't publish to them)
	if [ ! -d $webserver_mount_dir ]; then
		echo Creating $webserver_mount_dir ... 
	    mkdir -p $webserver_mount_dir
	fi
	
	mountpoint -q $webserver_mount_dir
	if [ $? != 0 ];then
		echo Mounting $webserver_mount_dir ... 
		sshfs -o IdentityFile=$rsa_file $webserver_account:$webserver_dir $webserver_mount_dir
	fi
	
	# The DDNS diagnostics web page on a remote server
	echo Copying web page to $webserver...
	cp index.php default.css $webserver_html
	cp ncdip.py $webserver_cgi/ncdip
	
	# Handle the auth file specially (used to access the Namecheap API and for logging WAN IPs)
	cp ~/.auth/namecheap.auth $webserver_auth
	
	touch $tsFile
else
	echo $webserver files are up to date.
fi

echo Done.
